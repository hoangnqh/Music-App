
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javazoom.jl.player.Player;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ADMIN
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    JFileChooser fileDialog = new JFileChooser();
    String fileName;      
    Player player;
    Thread playingThread;
    Thread strackBarThread;
    int lengthOfAudio;
    Vector header = new Vector();
    Vector data = new Vector();
    DefaultTableModel tblModel;
    String songList = "song-list.txt";
    
    public MainFrame() {
        initComponents();
        header.add("Song name");
        header.add("Duration");
        header.add("Path");
        tblModel = (DefaultTableModel) tblSongList.getModel();
        loadSongList();
        tblModel.setDataVector(data, header);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtSelectedFile = new javax.swing.JTextField();
        btnOpen = new javax.swing.JButton();
        sliderProgress = new javax.swing.JSlider();
        btnStart = new javax.swing.JButton();
        btnEnd = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSongList = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mniAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mucsic App");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("File is open");

        btnOpen.setText("Select song");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnEnd.setText("End");
        btnEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEndActionPerformed(evt);
            }
        });

        btnSave.setText("Save song list");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnAdd.setText("Add song");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        tblSongList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblSongList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSongListMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblSongListMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblSongList);

        jMenu1.setText("File");
        jMenu1.add(jSeparator1);

        mniExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniExit.setText("Exit");
        jMenu1.add(mniExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        mniAbout.setText("About");
        mniAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAboutActionPerformed(evt);
            }
        });
        jMenu2.add(mniAbout);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStart)
                        .addGap(28, 28, 28)
                        .addComponent(btnEnd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdd)
                        .addGap(30, 30, 30)
                        .addComponent(btnRemove)
                        .addGap(28, 28, 28)
                        .addComponent(btnSave))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSelectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOpen))
                    .addComponent(jLabel1)
                    .addComponent(sliderProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSelectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpen))
                .addGap(18, 18, 18)
                .addComponent(sliderProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStart)
                    .addComponent(btnEnd)
                    .addComponent(btnAdd)
                    .addComponent(btnSave)
                    .addComponent(btnRemove))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        // TODO add your handling code here:
        try{
            int result = fileDialog.showOpenDialog(this);
            if(result == JFileChooser.APPROVE_OPTION){
                File f = fileDialog.getSelectedFile();
                if(f.isFile()){
                    this.txtSelectedFile.setText(f.getCanonicalPath());
                }
            }
        }
        catch(Exception e){
        }   
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here
        fileName = txtSelectedFile.getText();
        File file = new File(fileName);
        try{
            FileInputStream fis = new FileInputStream(file);
            BufferedInputStream bis = new BufferedInputStream(fis);
            player = new Player(bis);
            lengthOfAudio = (int) getDuration(file);
            sliderProgress.setMaximum(lengthOfAudio);
        }
        catch(Exception e){
            e.printStackTrace();
        }
        playingThread = new Thread(){
            public void run(){
                try{
                    player.play();
                }
                catch(Exception e){
                    
                }
            }
        };
        strackBarThread = new Thread(){
            public void run(){
                try{
                    int cnt = 0;
                    while(!player.isComplete() && playingThread.isAlive()){
                        sliderProgress.setValue(cnt);
                        cnt += 1;
                        Thread.sleep(1000);
                    }
                    sliderProgress.setValue((int) lengthOfAudio);
                    btnStart.setEnabled(true);
                    btnEnd.setEnabled(false);
                    sliderProgress.setValue(0);
                }
                catch(Exception e){
                    
                }
                btnEndActionPerformed(null);
            }
        };
        playingThread.start();
        strackBarThread.start();
        btnStart.setEnabled(false);
        btnEnd.setEnabled(true);
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndActionPerformed
        // TODO add your handling code here:
        if(player != null){
            player.close();
        }
        playingThread.interrupt();
        strackBarThread.interrupt();
        btnStart.setEnabled(true);
        btnEnd.setEnabled(false);
        sliderProgress.setValue(0);
    }//GEN-LAST:event_btnEndActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        fileDialog.setMultiSelectionEnabled(true);
       
        int result = fileDialog.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION){
            File[] files = fileDialog.getSelectedFiles();
            try{
                addFileToTable(files);
            } catch(Exception e){
                
            }
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblSongListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSongListMouseReleased
        // TODO add your handling code here:
        if(tblSongList.isEditing()){
            int row = tblSongList.getSelectedRow();
            int column = tblSongList.getSelectedColumn();
            tblSongList.getCellEditor(row, column).cancelCellEditing();
        }
    }//GEN-LAST:event_tblSongListMouseReleased

    private void tblSongListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSongListMouseClicked
        // TODO add your handling code here:
        int row = tblSongList.getSelectedRow();
        String path = tblSongList.getValueAt(row, 2).toString();
        txtSelectedFile.setText(path);
        if(evt.getClickCount() == 2){
            if(playingThread != null){
                btnEndActionPerformed(null);
            }
            btnStartActionPerformed(null);
        }
    }//GEN-LAST:event_tblSongListMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        try {
            File file = new File(songList);
            if(!file.exists()) file.createNewFile();
            PrintWriter pw = new PrintWriter(file);
            for(int i = 0; i < data.size(); i++){
                Vector row = (Vector) data.get(i);
                String s = row.get(0) + "," + row.get(1) + "," + row.get(2);
                pw.println(s);
            }
            pw.close();
        } catch (Exception e) {
        }
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int pos = tblSongList.getSelectedRow();
        int result = JOptionPane.showConfirmDialog(null, "Delete this song ?", 
                "Confirm", JOptionPane.YES_NO_OPTION);
        if(result == JOptionPane.YES_OPTION){
            data.remove(pos);
            tblSongList.updateUI();
        }
        
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(null, "Do you want exit?", 
                "Confirm", JOptionPane.YES_NO_OPTION);
        if(result == JOptionPane.YES_OPTION){
            System.exit(0);
        }
        else{
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        }
        
    }//GEN-LAST:event_formWindowClosing

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void mniAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAboutActionPerformed
        // TODO add your handling code here:
        About about = new About();
        about.setLocationRelativeTo(null);
        about.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        about.setVisible(true);
    }//GEN-LAST:event_mniAboutActionPerformed

    private void loadSongList(){
        try {
            FileReader fr = new  FileReader(songList);
            BufferedReader br = new BufferedReader(fr);
            String song;
            while((song = br.readLine()) != null){
                String info[] = song.split(",");
                Vector v = new Vector();
                v.add(info[0]);
                v.add(info[1]);
                v.add(info[2]);
                data.add(v);
            }
            br.close(); fr.close();
        } catch (Exception e) {
        }
        
    }
    
    private long getDuration(File f) throws Exception{
        AudioFileFormat audioFile = AudioSystem.getAudioFileFormat(f);
        long microSecond = (long)audioFile.properties().get("duration");
        long second = microSecond/1000000;
        return second;
    }
    
    private String getDurationFormat(File f) throws Exception{
        AudioFileFormat audioFile = AudioSystem.getAudioFileFormat(f);
        long microSecond = (long)audioFile.properties().get("duration");
        long second = TimeUnit.MICROSECONDS.toSeconds(microSecond);
        long minute = TimeUnit.MICROSECONDS.toMinutes(microSecond);
        long hour = TimeUnit.MICROSECONDS.toHours(microSecond);
        return hour + ":" + minute + ":" + second;
    }
    
    void addFileToTable(File[] files) throws Exception{
        for(File file: files){
            String duration = getDurationFormat(file);
            String name = file.getName();
            String path = file.getCanonicalPath();
            Vector v = new Vector();
            v.add(name);
            v.add(duration);
            v.add(path);
            
            data.add(v);
        }
        tblSongList.updateUI();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnEnd;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem mniAbout;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JSlider sliderProgress;
    private javax.swing.JTable tblSongList;
    private javax.swing.JTextField txtSelectedFile;
    // End of variables declaration//GEN-END:variables
}
